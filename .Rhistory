?cars
plot(cars, xlab = "Speed (mph)"), ylab = "Stopping distance (ft)", las = 1, xlim = c(0,25))
library(ggplot)
install.packages(tidyverse)
getwd()
demo()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("igraph")
# Load tidyvers
library(tidyverse)
# Load igraph
library(igraph)
# Create the friends1_edges tibble
name1_25 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2_25 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours_25 <- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours >= 5]]
# Set vertex color by gender
# "orange" for females and "dodgerblue" for males
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
# Plot the graph object g1 in a circle layout
plot(g1, vertex.label.color = "black", layout = layout_in_circle(g1))
# Plot the graph object g1 in a Fruchterman-Reingold layout
plot(g1, vertex.label.color = "black", layout = layout_with_fr(g1))
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Load tidyvers
library(tidyverse)
install.packages("tidyverse")
# Load tidyvers
library(tidyverse)
# Load igraph
library(igraph)
# Create the friends1_edges tibble
name1_25 <- c("Joe", "Joe", "Joe", "Erin", "Kelley", "Ronald", "Ronald", "Ronald",
"Michael", "Michael", "Michael", "Valentine", "Troy", "Troy", "Jasmine", "Jasmine",
"Juan", "Carey", "Frankie", "Frankie", "Michael", "Michael", "Keith", "Keith", "Gregory")
name2_25 <- c("Ronald", "Michael", "Troy", "Kelley", "Valentine", "Troy", "Perry", "Jasmine", "Troy",
"Jasmine", "Juan", "Perry", "Jasmine", "Juan", "Juan", "Carey", "Demetrius", "Frankie",
"Michael", "Merle", "Merle", "Alex", "Gregory", "Marion", "Marion")
hours_25 <- c(1, 3, 2, 3, 5, 1, 3, 5, 2, 1, 3, 5, 3, 2, 6, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2)
# Rename columns to match prev ex
friends1_edges <- tibble(name1 = name1_25, name2 = name2_25, hours = hours_25)
# Create the friends1_nodes tibble
name <- c("Joe", "Erin", "Kelley", "Ronald", "Michael", "Valentine", "Troy", "Jasmine",
"Juan", "Carey", "Frankie", "Keith", "Gregory", "Perry", "Demetrius",
"Merle", "Alex", "Marion")
gender <- c("M", "F", "F", "M", "M", "F", "M", "F", "M", "F", "M", "M", "M", "M",
"M", "M", "F", "F")
friends1_nodes <- tibble(name, gender)
# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours >= 5]]
# Set vertex color by gender
# "orange" for females and "dodgerblue" for males
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
# Plot the graph object g1 in a circle layout
plot(g1, vertex.label.color = "black", layout = layout_in_circle(g1))
# Plot the graph object g1 in a Fruchterman-Reingold layout
plot(g1, vertex.label.color = "black", layout = layout_with_fr(g1))
# Plot the graph object g1 in a Tree layout
m <- layout_as_tree(g1)
plot(g1, vertex.label.color = "black", layout = m)
# Plot the graph object g1 using igraph's chosen layout
m1 <- layout_nicely(g1)
plot(g1, vertex.label.color = "black", layout = m1)
# Create a vector of weights based on the number of hours each pair spend together
w1 <- E(g1)$hours
# Plot the network varying edges by weights
m1 <- layout_nicely(g1)
plot(g1,
vertex.label.color = "black",
edge.color = 'black',
edge.width = w1,
layout = m1)
g1
setwd("E:/JS/Courses/Analyzing Networks with R/Network Analysis in R/network-analysis")
library(tidyverse)
library(igraph)
measels <- read_csv("data/measles.csv")
# Load meas
measles <- read_csv("data/measles.csv")
View(measles)
# Load measles.csv data file into a dataframe
measles <- read_csv("data/measles.csv")
# Get graph object
g <- graph_from_data_frame(measles, directed = TRUE)
# Is the graph directed?
is.directed(g)
# Is the graph weighted?
is.weighted(g)
# Where does each edge originate from?
table(head_of(g, E(g)))
# Make a basic plot
plot(g,
vertex.label.color = "black",
edge.color = 'gray77',
vertex.size = 0,
edge.arrow.size = 0.1,
layout = layout_nicely(g))
# Is there an edge going from vertex 184 to vertex 178?
g['184', '187']
# Is there an edge going from vertex 178 to vertex 184?
g['178', '184']
# Show all edges going to or from vertex 184
incident(g, '184', mode = c("ALL"))
# Show all edges going out from vertex 184
incident(g, '184', mode = c("OUT"))
# Identify all neighbors of vertex 12 regardless of direction
neighbors(g, '12', mode = c('all'))
# Identify other vertices that direct edges towards vertex 12
neighbors(g, '12', mode = c('in'))
# Identify any vertices that receive an edge from vertex 42 and direct an edge to vertex 124
n1 <- neighbors(g, '42', mode = c('all'))
n2 <- neighbors(g, '124', mode = c('all'))
intersection(n1, n2)
# Identify any vertices that receive an edge from vertex 42 and direct an edge to vertex 124
n1 <- neighbors(g, '42', mode = c('out'))
n2 <- neighbors(g, '124', mode = c('in'))
intersection(n1, n2)
# Which two vertices are the furthest apart in the graph ?
farthest_vertices(g)
# Shows the path sequence between two furthest apart vertices.
get_diameter(g)
# Identify vertices that are reachable within two connections from vertex 42
ego(g, 2, '42', mode = c('out'))
# Identify vertices that can reach vertex 42 within two connections
ego(g, 2, '42', mode = c('in'))
# Calculate the out-degree of each vertex
g.outd <- degree(g, mode = c("out"))
# View a summary of out-degree
table(g.outd)
# Make a histogram of out-degrees
hist(g.outd, breaks = 30)
# Find the vertex that has the maximum out-degree
which.max(g.outd)
# Calculate betweenness of each vertex
g.b <- betweenness(g, directed = TRUE)
# Show histogram of vertex betweenness
hist(g.b, breaks = 80)
# Create plot with vertex size determined by betweenness score
plot(g,
vertex.label = NA,
edge.color = 'black',
vertex.size = sqrt(g.b)+1,
edge.arrow.size = 0.05,
layout = layout_nicely(g))
# Make an ego graph
g184 <- make_ego_graph(g, diameter(g), nodes = '184', mode = c("all"))[[1]]
# Get a vector of geodesic distances of all vertices from vertex 184
dists <- distances(g184, "184")
# Create a color palette of length equal to the maximal geodesic distance plus one.
colors <- c("black", "red", "orange", "blue", "dodgerblue", "cyan")
# Set color attribute to vertices of network g184.
V(g184)$color <- colors[dists+1]
# Visualize the network based on geodesic distance from vertex 184 (patient zero).
plot(g184,
vertex.label = NA,
vertex.label.color = "white",
vertex.label.cex = .6,
edge.color = 'black',
vertex.size = 7,
edge.arrow.size = .05,
main = "Geodesic Distances from Patient Zero"
)
# Visualize the network based on geodesic distance from vertex 184 (patient zero).
plot(g184,
vertex.label = dists,
vertex.label.color = "white",
vertex.label.cex = .6,
edge.color = 'black',
vertex.size = 7,
edge.arrow.size = .05,
main = "Geodesic Distances from Patient Zero"
)
# Create plot with vertex size determined by betweenness score
plot(g,
vertex.label = NA,
edge.color = 'black',
vertex.size = sqrt(g.b)+1,
edge.arrow.size = 0.05,
layout = layout_nicely(g))
# Make an ego graph
g184 <- make_ego_graph(g, diameter(g), nodes = '184', mode = c("all"))[[1]]
# Get a vector of geodesic distances of all vertices from vertex 184
dists <- distances(g184, "184")
# Create a color palette of length equal to the maximal geodesic distance plus one.
colors <- c("black", "red", "orange", "blue", "dodgerblue", "cyan")
# Set color attribute to vertices of network g184.
V(g184)$color <- colors[dists+1]
# Visualize the network based on geodesic distance from vertex 184 (patient zero).
plot(g184,
vertex.label = dists,
vertex.label.color = "white",
vertex.label.cex = .6,
edge.color = 'black',
vertex.size = 7,
edge.arrow.size = .05,
main = "Geodesic Distances from Patient Zero"
)
